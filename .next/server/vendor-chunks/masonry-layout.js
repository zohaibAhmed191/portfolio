/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/masonry-layout";
exports.ids = ["vendor-chunks/masonry-layout"];
exports.modules = {

/***/ "(ssr)/./node_modules/masonry-layout/masonry.js":
/*!************************************************!*\
  !*** ./node_modules/masonry-layout/masonry.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Masonry v4.2.2\n * Cascading grid layout library\n * https://masonry.desandro.com\n * MIT License\n * by David DeSandro\n */ (function(window1, factory) {\n    // universal module definition\n    /* jshint strict: false */ /*globals define, module, require */ if (true) {\n        // AMD\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! outlayer/outlayer */ \"(ssr)/./node_modules/outlayer/outlayer.js\"),\n            __webpack_require__(/*! get-size/get-size */ \"(ssr)/./node_modules/get-size/get-size.js\")\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(window, function factory(Outlayer, getSize) {\n    \"use strict\";\n    // -------------------------- masonryDefinition -------------------------- //\n    // create an Outlayer layout class\n    var Masonry = Outlayer.create(\"masonry\");\n    // isFitWidth -> fitWidth\n    Masonry.compatOptions.fitWidth = \"isFitWidth\";\n    var proto = Masonry.prototype;\n    proto._resetLayout = function() {\n        this.getSize();\n        this._getMeasurement(\"columnWidth\", \"outerWidth\");\n        this._getMeasurement(\"gutter\", \"outerWidth\");\n        this.measureColumns();\n        // reset column Y\n        this.colYs = [];\n        for(var i = 0; i < this.cols; i++){\n            this.colYs.push(0);\n        }\n        this.maxY = 0;\n        this.horizontalColIndex = 0;\n    };\n    proto.measureColumns = function() {\n        this.getContainerWidth();\n        // if columnWidth is 0, default to outerWidth of first item\n        if (!this.columnWidth) {\n            var firstItem = this.items[0];\n            var firstItemElem = firstItem && firstItem.element;\n            // columnWidth fall back to item of first element\n            this.columnWidth = firstItemElem && getSize(firstItemElem).outerWidth || // if first elem has no width, default to size of container\n            this.containerWidth;\n        }\n        var columnWidth = this.columnWidth += this.gutter;\n        // calculate columns\n        var containerWidth = this.containerWidth + this.gutter;\n        var cols = containerWidth / columnWidth;\n        // fix rounding errors, typically with gutters\n        var excess = columnWidth - containerWidth % columnWidth;\n        // if overshoot is less than a pixel, round up, otherwise floor it\n        var mathMethod = excess && excess < 1 ? \"round\" : \"floor\";\n        cols = Math[mathMethod](cols);\n        this.cols = Math.max(cols, 1);\n    };\n    proto.getContainerWidth = function() {\n        // container is parent if fit width\n        var isFitWidth = this._getOption(\"fitWidth\");\n        var container = isFitWidth ? this.element.parentNode : this.element;\n        // check that this.size and size are there\n        // IE8 triggers resize on body size change, so they might not be\n        var size = getSize(container);\n        this.containerWidth = size && size.innerWidth;\n    };\n    proto._getItemLayoutPosition = function(item) {\n        item.getSize();\n        // how many columns does this brick span\n        var remainder = item.size.outerWidth % this.columnWidth;\n        var mathMethod = remainder && remainder < 1 ? \"round\" : \"ceil\";\n        // round if off by 1 pixel, otherwise use ceil\n        var colSpan = Math[mathMethod](item.size.outerWidth / this.columnWidth);\n        colSpan = Math.min(colSpan, this.cols);\n        // use horizontal or top column position\n        var colPosMethod = this.options.horizontalOrder ? \"_getHorizontalColPosition\" : \"_getTopColPosition\";\n        var colPosition = this[colPosMethod](colSpan, item);\n        // position the brick\n        var position = {\n            x: this.columnWidth * colPosition.col,\n            y: colPosition.y\n        };\n        // apply setHeight to necessary columns\n        var setHeight = colPosition.y + item.size.outerHeight;\n        var setMax = colSpan + colPosition.col;\n        for(var i = colPosition.col; i < setMax; i++){\n            this.colYs[i] = setHeight;\n        }\n        return position;\n    };\n    proto._getTopColPosition = function(colSpan) {\n        var colGroup = this._getTopColGroup(colSpan);\n        // get the minimum Y value from the columns\n        var minimumY = Math.min.apply(Math, colGroup);\n        return {\n            col: colGroup.indexOf(minimumY),\n            y: minimumY\n        };\n    };\n    /**\n   * @param {Number} colSpan - number of columns the element spans\n   * @returns {Array} colGroup\n   */ proto._getTopColGroup = function(colSpan) {\n        if (colSpan < 2) {\n            // if brick spans only one column, use all the column Ys\n            return this.colYs;\n        }\n        var colGroup = [];\n        // how many different places could this brick fit horizontally\n        var groupCount = this.cols + 1 - colSpan;\n        // for each group potential horizontal position\n        for(var i = 0; i < groupCount; i++){\n            colGroup[i] = this._getColGroupY(i, colSpan);\n        }\n        return colGroup;\n    };\n    proto._getColGroupY = function(col, colSpan) {\n        if (colSpan < 2) {\n            return this.colYs[col];\n        }\n        // make an array of colY values for that one group\n        var groupColYs = this.colYs.slice(col, col + colSpan);\n        // and get the max value of the array\n        return Math.max.apply(Math, groupColYs);\n    };\n    // get column position based on horizontal index. #873\n    proto._getHorizontalColPosition = function(colSpan, item) {\n        var col = this.horizontalColIndex % this.cols;\n        var isOver = colSpan > 1 && col + colSpan > this.cols;\n        // shift to next row if item can't fit on current row\n        col = isOver ? 0 : col;\n        // don't let zero-size items take up space\n        var hasSize = item.size.outerWidth && item.size.outerHeight;\n        this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n        return {\n            col: col,\n            y: this._getColGroupY(col, colSpan)\n        };\n    };\n    proto._manageStamp = function(stamp) {\n        var stampSize = getSize(stamp);\n        var offset = this._getElementOffset(stamp);\n        // get the columns that this stamp affects\n        var isOriginLeft = this._getOption(\"originLeft\");\n        var firstX = isOriginLeft ? offset.left : offset.right;\n        var lastX = firstX + stampSize.outerWidth;\n        var firstCol = Math.floor(firstX / this.columnWidth);\n        firstCol = Math.max(0, firstCol);\n        var lastCol = Math.floor(lastX / this.columnWidth);\n        // lastCol should not go over if multiple of columnWidth #425\n        lastCol -= lastX % this.columnWidth ? 0 : 1;\n        lastCol = Math.min(this.cols - 1, lastCol);\n        // set colYs to bottom of the stamp\n        var isOriginTop = this._getOption(\"originTop\");\n        var stampMaxY = (isOriginTop ? offset.top : offset.bottom) + stampSize.outerHeight;\n        for(var i = firstCol; i <= lastCol; i++){\n            this.colYs[i] = Math.max(stampMaxY, this.colYs[i]);\n        }\n    };\n    proto._getContainerSize = function() {\n        this.maxY = Math.max.apply(Math, this.colYs);\n        var size = {\n            height: this.maxY\n        };\n        if (this._getOption(\"fitWidth\")) {\n            size.width = this._getContainerFitWidth();\n        }\n        return size;\n    };\n    proto._getContainerFitWidth = function() {\n        var unusedCols = 0;\n        // count unused columns\n        var i = this.cols;\n        while(--i){\n            if (this.colYs[i] !== 0) {\n                break;\n            }\n            unusedCols++;\n        }\n        // fit container to columns that have been used\n        return (this.cols - unusedCols) * this.columnWidth - this.gutter;\n    };\n    proto.needsResizeLayout = function() {\n        var previousWidth = this.containerWidth;\n        this.getContainerWidth();\n        return previousWidth != this.containerWidth;\n    };\n    return Masonry;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/masonry-layout/masonry.js\n");

/***/ })

};
;