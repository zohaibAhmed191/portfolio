"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-countup";
exports.ids = ["vendor-chunks/react-countup"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-countup/build/index.js":
/*!***************************************************!*\
  !*** ./node_modules/react-countup/build/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar countup_js = __webpack_require__(/*! countup.js */ \"(ssr)/./node_modules/countup.js/dist/countUp.min.js\");\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/**\n * Silence SSR Warnings.\n * Borrowed from Formik v2.1.1, Licensed MIT.\n *\n * https://github.com/formium/formik/blob/9316a864478f8fcd4fa99a0735b1d37afdf507dc/LICENSE\n */ var useIsomorphicLayoutEffect =  false ? 0 : React.useEffect;\n/* eslint-disable @typescript-eslint/no-explicit-any */ /**\n * Create a stable reference to a callback which is updated after each render is committed.\n * Typed version borrowed from Formik v2.2.1. Licensed MIT.\n *\n * https://github.com/formium/formik/blob/9316a864478f8fcd4fa99a0735b1d37afdf507dc/LICENSE\n */ function useEventCallback(fn) {\n    var ref = React.useRef(fn);\n    // we copy a ref to the callback scoped to the current state/props on each render\n    useIsomorphicLayoutEffect(function() {\n        ref.current = fn;\n    });\n    return React.useCallback(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return ref.current.apply(void 0, args);\n    }, []);\n}\nvar createCountUpInstance = function createCountUpInstance(el, props) {\n    var decimal = props.decimal, decimals = props.decimals, duration = props.duration, easingFn = props.easingFn, end = props.end, formattingFn = props.formattingFn, numerals = props.numerals, prefix = props.prefix, separator = props.separator, start = props.start, suffix = props.suffix, useEasing = props.useEasing, useGrouping = props.useGrouping, useIndianSeparators = props.useIndianSeparators, enableScrollSpy = props.enableScrollSpy, scrollSpyDelay = props.scrollSpyDelay, scrollSpyOnce = props.scrollSpyOnce, plugin = props.plugin;\n    return new countup_js.CountUp(el, end, {\n        startVal: start,\n        duration: duration,\n        decimal: decimal,\n        decimalPlaces: decimals,\n        easingFn: easingFn,\n        formattingFn: formattingFn,\n        numerals: numerals,\n        separator: separator,\n        prefix: prefix,\n        suffix: suffix,\n        plugin: plugin,\n        useEasing: useEasing,\n        useIndianSeparators: useIndianSeparators,\n        useGrouping: useGrouping,\n        enableScrollSpy: enableScrollSpy,\n        scrollSpyDelay: scrollSpyDelay,\n        scrollSpyOnce: scrollSpyOnce\n    });\n};\nvar _excluded$1 = [\n    \"ref\",\n    \"startOnMount\",\n    \"enableReinitialize\",\n    \"delay\",\n    \"onEnd\",\n    \"onStart\",\n    \"onPauseResume\",\n    \"onReset\",\n    \"onUpdate\"\n];\nvar DEFAULTS = {\n    decimal: \".\",\n    separator: \",\",\n    delay: null,\n    prefix: \"\",\n    suffix: \"\",\n    duration: 2,\n    start: 0,\n    decimals: 0,\n    startOnMount: true,\n    enableReinitialize: true,\n    useEasing: true,\n    useGrouping: true,\n    useIndianSeparators: false\n};\nvar useCountUp = function useCountUp(props) {\n    var filteredProps = Object.fromEntries(Object.entries(props).filter(function(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2), value = _ref2[1];\n        return value !== undefined;\n    }));\n    var _useMemo = React.useMemo(function() {\n        return _objectSpread2(_objectSpread2({}, DEFAULTS), filteredProps);\n    }, [\n        props\n    ]), ref = _useMemo.ref, startOnMount = _useMemo.startOnMount, enableReinitialize = _useMemo.enableReinitialize, delay = _useMemo.delay, onEnd = _useMemo.onEnd, onStart = _useMemo.onStart, onPauseResume = _useMemo.onPauseResume, onReset = _useMemo.onReset, onUpdate = _useMemo.onUpdate, instanceProps = _objectWithoutProperties(_useMemo, _excluded$1);\n    var countUpRef = React.useRef();\n    var timerRef = React.useRef();\n    var isInitializedRef = React.useRef(false);\n    var createInstance = useEventCallback(function() {\n        return createCountUpInstance(typeof ref === \"string\" ? ref : ref.current, instanceProps);\n    });\n    var getCountUp = useEventCallback(function(recreate) {\n        var countUp = countUpRef.current;\n        if (countUp && !recreate) {\n            return countUp;\n        }\n        var newCountUp = createInstance();\n        countUpRef.current = newCountUp;\n        return newCountUp;\n    });\n    var start = useEventCallback(function() {\n        var run = function run() {\n            return getCountUp(true).start(function() {\n                onEnd === null || onEnd === void 0 || onEnd({\n                    pauseResume: pauseResume,\n                    reset: reset,\n                    start: restart,\n                    update: update\n                });\n            });\n        };\n        if (delay && delay > 0) {\n            timerRef.current = setTimeout(run, delay * 1000);\n        } else {\n            run();\n        }\n        onStart === null || onStart === void 0 || onStart({\n            pauseResume: pauseResume,\n            reset: reset,\n            update: update\n        });\n    });\n    var pauseResume = useEventCallback(function() {\n        getCountUp().pauseResume();\n        onPauseResume === null || onPauseResume === void 0 || onPauseResume({\n            reset: reset,\n            start: restart,\n            update: update\n        });\n    });\n    var reset = useEventCallback(function() {\n        // Quick fix for https://github.com/glennreyes/react-countup/issues/736 - should be investigated\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (getCountUp().el) {\n            timerRef.current && clearTimeout(timerRef.current);\n            getCountUp().reset();\n            onReset === null || onReset === void 0 || onReset({\n                pauseResume: pauseResume,\n                start: restart,\n                update: update\n            });\n        }\n    });\n    var update = useEventCallback(function(newEnd) {\n        getCountUp().update(newEnd);\n        onUpdate === null || onUpdate === void 0 || onUpdate({\n            pauseResume: pauseResume,\n            reset: reset,\n            start: restart\n        });\n    });\n    var restart = useEventCallback(function() {\n        reset();\n        start();\n    });\n    var maybeInitialize = useEventCallback(function(shouldReset) {\n        if (startOnMount) {\n            if (shouldReset) {\n                reset();\n            }\n            start();\n        }\n    });\n    React.useEffect(function() {\n        if (!isInitializedRef.current) {\n            isInitializedRef.current = true;\n            maybeInitialize();\n        } else if (enableReinitialize) {\n            maybeInitialize(true);\n        }\n    }, [\n        enableReinitialize,\n        isInitializedRef,\n        maybeInitialize,\n        delay,\n        props.start,\n        props.suffix,\n        props.prefix,\n        props.duration,\n        props.separator,\n        props.decimals,\n        props.decimal,\n        props.formattingFn\n    ]);\n    React.useEffect(function() {\n        return function() {\n            reset();\n        };\n    }, [\n        reset\n    ]);\n    return {\n        start: restart,\n        pauseResume: pauseResume,\n        reset: reset,\n        update: update,\n        getCountUp: getCountUp\n    };\n};\nvar _excluded = [\n    \"className\",\n    \"redraw\",\n    \"containerProps\",\n    \"children\",\n    \"style\"\n];\nvar CountUp = function CountUp(props) {\n    var className = props.className, redraw = props.redraw, containerProps = props.containerProps, children = props.children, style = props.style, useCountUpProps = _objectWithoutProperties(props, _excluded);\n    var containerRef = React.useRef(null);\n    var isInitializedRef = React.useRef(false);\n    var _useCountUp = useCountUp(_objectSpread2(_objectSpread2({}, useCountUpProps), {}, {\n        ref: containerRef,\n        startOnMount: typeof children !== \"function\" || props.delay === 0,\n        // component manually restarts\n        enableReinitialize: false\n    })), start = _useCountUp.start, reset = _useCountUp.reset, updateCountUp = _useCountUp.update, pauseResume = _useCountUp.pauseResume, getCountUp = _useCountUp.getCountUp;\n    var restart = useEventCallback(function() {\n        start();\n    });\n    var update = useEventCallback(function(end) {\n        if (!props.preserveValue) {\n            reset();\n        }\n        updateCountUp(end);\n    });\n    var initializeOnMount = useEventCallback(function() {\n        if (typeof props.children === \"function\") {\n            // Warn when user didn't use containerRef at all\n            if (!(containerRef.current instanceof Element)) {\n                console.error('Couldn\\'t find attached element to hook the CountUp instance into! Try to attach \"containerRef\" from the render prop to a an Element, eg. <span ref={containerRef} />.');\n                return;\n            }\n        }\n        // unlike the hook, the CountUp component initializes on mount\n        getCountUp();\n    });\n    React.useEffect(function() {\n        initializeOnMount();\n    }, [\n        initializeOnMount\n    ]);\n    React.useEffect(function() {\n        if (isInitializedRef.current) {\n            update(props.end);\n        }\n    }, [\n        props.end,\n        update\n    ]);\n    var redrawDependencies = redraw && props;\n    // if props.redraw, call this effect on every props change\n    React.useEffect(function() {\n        if (redraw && isInitializedRef.current) {\n            restart();\n        }\n    }, [\n        restart,\n        redraw,\n        redrawDependencies\n    ]);\n    // if not props.redraw, call this effect only when certain props are changed\n    React.useEffect(function() {\n        if (!redraw && isInitializedRef.current) {\n            restart();\n        }\n    }, [\n        restart,\n        redraw,\n        props.start,\n        props.suffix,\n        props.prefix,\n        props.duration,\n        props.separator,\n        props.decimals,\n        props.decimal,\n        props.className,\n        props.formattingFn\n    ]);\n    React.useEffect(function() {\n        isInitializedRef.current = true;\n    }, []);\n    if (typeof children === \"function\") {\n        // TypeScript forces functional components to return JSX.Element | null.\n        return children({\n            countUpRef: containerRef,\n            start: start,\n            reset: reset,\n            update: updateCountUp,\n            pauseResume: pauseResume,\n            getCountUp: getCountUp\n        });\n    }\n    return /*#__PURE__*/ React.createElement(\"span\", _extends({\n        className: className,\n        ref: containerRef,\n        style: style\n    }, containerProps), typeof props.start !== \"undefined\" ? getCountUp().formattingFn(props.start) : \"\");\n};\nexports[\"default\"] = CountUp;\nexports.useCountUp = useCountUp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-countup/build/index.js\n");

/***/ })

};
;